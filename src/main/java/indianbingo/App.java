/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package indianbingo;

import com.google.inject.Guice;
import com.google.inject.Injector;
import indianbingo.game.Game;
import indianbingo.guice.GameModule;
import indianbingo.model.GameData;
import indianbingo.model.ImmutableGameData;
import indianbingo.model.ImmutableTicketInfo;

import java.util.Scanner;

public class App {

    protected static GameData gameData;

    protected static boolean initialize(Scanner scanner) {
        String next;
        int range;
        int players;
        int ticketRowSize;
        int ticketColSize;
        int numberPerRow;

        System.out.println(">> Enter the number range(1-n) : Default to 90");
        next = scanner.nextLine();
        System.out.println(next);
        if (Util.isQuit(next)) {
            return false;
        } else if (next.equals("")) {
            System.out.println("90");
            range = Util.MAX_NUM;
        } else {
            if (!Util.isValidNumRange(next)) return false;
            range = Integer.parseInt(next);
        }


        System.out.println(">> Enter Number of players playing the game:");
        next = scanner.nextLine();
        System.out.println(next);
        if (Util.isQuit(next) || !Util.isValidPlayerRange(next)) {
            return false;
        }
        players = Integer.parseInt(next);


        System.out.println(">> Enter Ticket Size : Default to 3X10 ( 3 rows and 10 columns):");
        next = scanner.nextLine();
        if (Util.isQuit(next)) {
            System.out.println(next);
            return false;
        } else if (next.equals("")) {
            System.out.println("3X10");
            ticketRowSize = Util.DEFAULT_ROW_SIZE;
            ticketColSize = Util.DEFAULT_COL_SIZE;
        } else {
            System.out.println(next);
            String[] ticketConfig = next.split("X");
            if (ticketConfig.length == 0) {
                System.out.printf("Invalid ticket size: #%s, input should be formatted as IntegerXInteger", next);
                return false;
            }
            if (!Util.isValidTicketRange(ticketConfig[0]) || !Util.isValidTicketRange(ticketConfig[1])) return false;
            ticketRowSize = Integer.parseInt(ticketConfig[0]);
            ticketColSize = Integer.parseInt(ticketConfig[1]);
        }

        System.out.println(">> Enter numbers per row. Default to 5:");
        next = scanner.nextLine();
        System.out.println(next);
        if (Util.isQuit(next)) {
            return false;
        } else if (next.equals("")) {
            if (Util.DEFAULT_NUMBER_PER_ROW_SIZE > ticketColSize) {
                System.out.printf("ticketColSize %d is smaller than default number, set number per row to %d", ticketColSize, ticketColSize);
                numberPerRow = ticketColSize;
            } else {
                numberPerRow = Util.DEFAULT_NUMBER_PER_ROW_SIZE;
            }
        } else {
            if (!Util.isValidRange(next, ticketColSize)) return false;
            numberPerRow = Integer.parseInt(next);
        }

        gameData = ImmutableGameData.builder()
                .range(range)
                .players(players)
                .ticketInfo(
                        ImmutableTicketInfo.builder()
                                .ranges(range)
                                .row(ticketRowSize)
                                .col(ticketColSize)
                                .numberPerRow(numberPerRow)
                                .build()
                )
                .build();

        System.out.println("***Ticket Created Successfully ****");
        System.out.println(">> Press 'N' to generate next number.");
        return true;
    }

    public static void main(String[] args) {
        System.out.println("**** Let's Play Housie *****");
        System.out.println("Note: - Press 'Q' to quit any time.");

        Scanner scanner = new Scanner(System.in);
        if (!initialize(scanner)) return;

        try {
            Injector injector = Guice.createInjector(new GameModule(gameData, scanner));
            Game game = injector.getInstance(Game.class);
            game.run();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
